#include <iostream>
#include <string>
#include <ctime>
#include <windows.h>
#include <fstream>
#include <cstdlib>

void Check(int i, int j)
{
	if (!(0 <= i && i < 10 && 0 <= j && j < 10))
	{
		throw "Ошибочное счисление координат.";
	}
}

void Check(int sea[10][10], int i, int j)
{
	if (0 <= i && i < 10 && 0 <= j && j < 10 && sea[i][j] == 1)
	{
		throw "Корабли не могут касаться друг друга сторонами и углами.";
	}
}

bool Check(int i, int sea[10][10], int x, int y, int sideOfTheWorld, bool show = true)
{
	bool e = false;
	try
	{
		for (int z = 0; z < 4 - i; z++)
		{
			if (sideOfTheWorld == 1)
			{
				Check(y - z, x);
			}
			else if (sideOfTheWorld == 2)
			{
				Check(y, x + z);
			}
			else if (sideOfTheWorld == 3)
			{
				Check(y + z, x);
			}
			else
			{
				Check(y, x - z);
			}
		}
		for (int z = -1; z < 4 - i + 1; z++)
		{
			if (sideOfTheWorld == 1)
			{
				Check(sea, y - z, x - 1); Check(sea, y - z, x); Check(sea, y - z, x + 1);
			}
			else if (sideOfTheWorld == 2)
			{
				Check(sea, y - 1, x + z);
				Check(sea, y, x + z);
				Check(sea, y + 1, x + z);
			}
			else if (sideOfTheWorld == 3)
			{
				Check(sea, y + z, x - 1); Check(sea, y + z, x); Check(sea, y + z, x + 1);
			}
			else
			{
				Check(sea, y - 1, x - z);
				Check(sea, y, x - z);
				Check(sea, y + 1, x - z);
			}
		}
	}
	catch (const char* rule)
	{
		if (show)
		{
			std::cout << rule << "\n";
		}
		e = true;
	}
	return e;
}

void Locate(int i, int sea[10][10], int x, int y, int sideOfTheWorld)
{
	for (int z = 0; z < 4 - i; z++)
	{
		if (sideOfTheWorld == 1)
		{
			sea[y - z][x] = 1;
		}
		else if (sideOfTheWorld == 2)
		{
			sea[y][x + z] = 1;
		}
		else if (sideOfTheWorld == 3)
		{
			sea[y + z][x] = 1;
		}
		else
		{
			sea[y][x - z] = 1;
		}
	}
}

std::string GetCage(int value, bool black = true)
{
	if (value == 0 || value == 1 && !black)
	{
		return " ";
	}
	else if (value == 1)
	{
		return "o";
	}
	else if (value == 2)
	{
		return ".";
	}
	else if (value == 3)
	{
		return "x";
	}
	else
	{
		return "X";
	}
}

void ShowOcean(std::string horizontal[10], int vertical[10], int sea[10][10])
{
	std::cout << "   ";
	for (int i = 0; i < 10; i++)
	{
		std::cout << " " << horizontal[i] << "  ";
	}
	std::cout << "\n";
	for (int i = 0; i < 10; i++)
	{
		if (i == 9)
		{
			std::cout << vertical[i] << " ";
		}
		else
		{
			std::cout << " " << vertical[i] << " ";
		}
		for (int j = 0; j < 10; j++)
		{
			std::cout << "[" << GetCage(sea[i][j]) << "]" << " ";
		}
		std::cout << "\n";
	}
}

void HitOrSink(int sea[10][10], int i, int j, bool show = true)
{
	if (0 <= i - 1 && sea[i - 1][j] == 1 ||
		j + 1 < 10 && sea[i][j + 1] == 1 ||
		i + 1 < 10 && sea[i + 1][j] == 1 ||
		0 <= j - 1 && sea[i][j - 1] == 1)
	{
		if (show)
		{
			std::cout << "Попал!" << "\n";
		}
		sea[i][j] = 3;
	}
	else
	{
		if (show)
		{
			std::cout << "Потопил!" << "\n";
		}
		sea[i][j] = 4;
		for (int x = i - 1; 0 <= x && sea[x][j] == 3; x--)
		{
			sea[x][j] = 4;
		}
		for (int x = j + 1; x < 10 && sea[i][x] == 3; x++)
		{
			sea[i][x] = 4;
		}
		for (int x = i + 1; x < 10 && sea[x][j] == 3; x++)
		{
			sea[x][j] = 4;
		}
		for (int x = j - 1; 0 <= x && sea[i][x] == 3; x--)
		{
			sea[i][x] = 4;
		}
	}
}

void ShowOcean(std::string horizontal[10], int vertical[10], int black[10][10], int white[10][10])
{
	for (int x = 0; x < 2; x++)
	{
		if (x == 1)
		{
			std::cout << " ";
		}
		std::cout << "   ";
		for (int i = 0; i < 10; i++)
		{
			std::cout << " " << horizontal[i] << "  ";
		}
	}
	std::cout << "\n";
	for (int i = 0; i < 10; i++)
	{
		for (int x = 0; x < 2; x++)
		{
			if (x == 1)
			{
				std::cout << " ";
			}
			if (i == 9)
			{
				std::cout << vertical[i] << " ";
			}
			else
			{
				std::cout << " " << vertical[i] << " ";
			}

			for (int j = 0; j < 10; j++)
			{
				if (x == 1)
				{
					std::cout << "[" << GetCage(white[i][j], false) << "]" << " ";
				}
				else
				{
					std::cout << "[" << GetCage(black[i][j]) << "]" << " ";
				}
			}
		}
		std::cout << "\n";
	}
}

void getCoordinates(std::string horizontal[10], int vertical[10], int& i, int& j)
{
	std::string letter;
	do
	{
		std::cout << "Введи букву: ";
		getline(std::cin, letter);

		j = 0;
		for (; j < 10; j++)
		{
			if (horizontal[j] == letter)
			{
				break;
			}
		}
	} while (j == 10);
	int number;
	do
	{
		std::cout << "Введи число: ";
		std::cin >> number;
		if (std::cin.fail())
		{
			std::cin.clear();
		}
		std::cin.ignore(32768, '\n');

		i = 0;
		for (; i < 10; i++)
		{
			if (vertical[i] == number)
			{
				break;
			}
		}
	} while (i == 10);
}

void SetRecord(int shotCount)
{
	int record = 0;
	std::ifstream in("Record.txt");
	if (in.is_open())
	{
		in >> record;
	}
	in.close();

	if (shotCount < record)
	{
		std::cout << "\n" << "Это новый рекорд!";
		std::fstream out("Record.txt");
		if (out.is_open())
		{
			out << shotCount;
		}
		out.close();
	}
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	std::cout << "Правила из Википедии" << "\n";

	std::string horizontal[10] = { "А", "Б", "В", "Г", "Д", "Е", "Ж", "З", "И", "К" };
	int vertical[10] =
	{
		1,
		2,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
		10
	};

	int black[10][10];
	int white[10][10];
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++)
		{
			black[i][j] = white[i][j] = 0;
		}
	}

	std::string ships[4] = { "Линкор", "Крейсер", "Эсминец", "Торпедный катер" };
	std::srand(unsigned(std::time(0)));
	int requiredNumberOfHits = 0;
	std::cout << "\n" << "РАЗМЕЩЕНИЕ" << "\n" << "\n";
	for (int i = 0; i < 4; i++)
	{
		for (int j = 1; j < i + 2; j++)
		{
			int x, y;
			int sideOfTheWorld;
			do
			{
				x = std::rand() % 10;
				y = std::rand() % 10;
				sideOfTheWorld = std::rand() % 4 + 1;
			} while (Check(i, white, x, y, sideOfTheWorld, false));

			Locate(i, white, x, y, sideOfTheWorld);
			requiredNumberOfHits += 4 - i;
		}
	}
	for (int i = 0; i < 4; i++)
	{
		for (int j = 1; j < i + 2; j++)
		{
			int x, y;
			int sideOfTheWorld;
			do
			{
				std::cout << ships[i] << " № " << j << "\n";
				std::cout << "Координаты кормы" << "\n";

				getCoordinates(horizontal, vertical, y, x);
				do
				{
					std::cout << "Носом на север - 1, восток - 2, юг - 3, запад - 4: ";
					std::cin >> sideOfTheWorld;
					if (std::cin.fail())
					{
						std::cin.clear();
					}
					std::cin.ignore(32768, '\n');
				} while (!(1 <= sideOfTheWorld && sideOfTheWorld <= 4));
			} while (Check(i, black, x, y, sideOfTheWorld));

			Locate(i, black, x, y, sideOfTheWorld);

			ShowOcean(horizontal, vertical, black);
		}
	}

	int numberOfHitsByHuman = 0, numberOfHitsByComputer = 0;
	bool human = true;
	int shotCount = 0;
	std::cout << "\n" << "НАЧАЛО БОЕВЫХ ДЕЙСТВИЙ" << "\n" << "\n";
	while (numberOfHitsByHuman != requiredNumberOfHits && numberOfHitsByComputer != requiredNumberOfHits)
	{
		ShowOcean(horizontal, vertical, black, white);
		if (human)
		{

			int i = 0, j = 0;
			do
			{
				getCoordinates(horizontal, vertical, i, j);
			} while (white[i][j] == 2 || white[i][j] == 3 || white[i][j] == 4);

			if (white[i][j] == 1)
			{
				HitOrSink(white, i, j);
				numberOfHitsByHuman++;
			}
			else
			{
				std::cout << "Мимо!" << "\n";
				white[i][j] = 2;
				human = false;
			}

			shotCount++;
		}
		else
		{
			std::cout << "Ход компьютера" << "\n";
			int i, j;
			do
			{
				i = std::rand() % 10;
				j = std::rand() % 10;
			} while (black[i][j] == 2 || black[i][j] == 3 || black[i][j] == 4);

			if (black[i][j] == 1)
			{
				HitOrSink(black, i, j, false);
				numberOfHitsByComputer++;
			}
			else
			{
				black[i][j] = 2;
				human = true;
			}
		}
	}

	std::cout << "\n" << "Победила дружба)";

	if (numberOfHitsByHuman == requiredNumberOfHits)
	{
		std::cout << "\n" << "\n" << "Совершено выстрелов: " << shotCount;
		SetRecord(shotCount);
	}

	return 0;
}
